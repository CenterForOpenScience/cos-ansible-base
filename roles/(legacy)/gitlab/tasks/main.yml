- name: Install required packages
  apt: pkg={{item}}
  with_items:
    - build-essential
    - zlib1g-dev
    - libyaml-dev
    - libssl-dev
    - libgdbm-dev
    - libreadline-dev
    - libncurses5-dev
    - libffi-dev
    - curl
    - openssh-server
    - redis-server
    - checkinstall
    - libxml2-dev
    - libxslt1-dev
    - libcurl4-openssl-dev
    - libicu-dev
    - logrotate
    - python-docutils
    - git-core
    - expect

- include: ruby.yml
- include: database.yml

- name: Clone GitLab repo
  git:
    repo={{ gitlab_repo_url }}
    dest={{ gitlab_repo_dir }}
    version={{ gitlab_repo_version }}
    update=no

- name: Make sure gitlab user owns the repo directory
  file: path={{gitlab_repo_dir}} owner=git recurse=yes state=directory

- name: Update gitlab configuration
  template:
    src=gitlab-config.j2
    dest="{{gitlab_repo_dir}}/config/gitlab.yml"
    owner={{gitlab_user}}

- name: Make sure the gitlab user has ownership of the log directory
  file:
    path={{gitlab_repo_dir}}/log
    owner={{gitlab_user}}
    recurse=yes
    state=directory
    mode=0744

- name: Make sure the gitlab user has ownership of the tmp directory
  file:
    path={{gitlab_repo_dir}}/tmp
    owner={{gitlab_user}}
    recurse=yes
    state=directory
    mode=0744

- name: Make sure repos directory exists
  file:
    path={{gitlab_repos_path}}
    state=directory
    owner={{gitlab_user}}
    group=git

- name: Make sure satellites directory exists
  file:
    path={{gitlab_satellites_dir}}
    state=directory
    owner={{gitlab_user}}
    group=git

- name: Make sure gitlab user can write to public/uploads directory
  file: path={{gitlab_repo_dir}}/public/uploads state=directory mode=0744

- name: Update unicorn config
  template:
    src=unicorn.rb.j2
    dest={{gitlab_repo_dir}}/config/unicorn.rb
    owner={{gitlab_user}}

- name: Make sure gitlab user can write to tmp
  file: path={{gitlab_repo_dir}}/tmp/
    mode=0755
    recurse=yes

- name: Copy Rack attack config
  copy:
    src=rack_attack.rb
    dest={{gitlab_repo_dir}}/config/initializers/rack_attack.rb
    owner={{gitlab_user}}

- name: Configure git
  template: src=gitconfig.j2 dest=/home/{{gitlab_user}}/.gitconfig owner={{gitlab_user}}

- name: Configure database
  template:
    src=database.j2
    dest={{gitlab_repo_dir}}/config/database.yml
    owner={{gitlab_user}}
    mode=0700

# NOTE: For some reason, the gem module is not successfully installing bunder,
# so just use the command module
- name: Install bundler
  command: "gem install bundler"

# NOTE: The option says "without mysql"
- name: Install gems
  command: >
    sudo -u {{gitlab_user}} -H bundle install
    --deployment --without development test mysql aws
  args:
    chdir: "{{gitlab_repo_dir}}"

- name: Install GitLab Shell
  command: "sudo -u {{gitlab_user}} -H bundle exec rake gitlab:shell:install[{{ gitlab_shell_repo_tag }}{% if gitlab_shell_repo_url is defined %}{{ ',' + gitlab_shell_repo_url }}{% endif %}] REDIS_URL={{gitlab_redis_url}} RAILS_ENV=production"
  args:
    chdir: "{{gitlab_repo_dir}}"


- name: Update gitlab-shell configuration
  template: src=gitlab-shell-config.j2 dest={{gitlab_shell_dir}}/config.yml owner={{gitlab_user}}

- name: Check if database has already been initialized
  command: sudo -u git -H psql -d gitlabhq_production -c "\dt"
  register: gitlab_database_check

# - debug: var=gitlab_database_check

# ONLY run this once! This will check if the database is already initialized (by checking the
# existence of the web_hooks table)
- name: Initialize database and activate advanced features
  command: >
    sudo -u {{gitlab_user}} -H bundle exec rake
    gitlab:setup RAILS_ENV=production force={{gitlab_force_db}}
  args:
    chdir: "{{gitlab_repo_dir}}"
  when: '"web_hooks" not in gitlab_database_check.stdout'

- name: Install init script
  command: cp {{gitlab_repo_dir}}/lib/support/init.d/gitlab /etc/init.d/gitlab
  args:
    creates: /etc/init.d/gitlab

- name: Update init defaults and make readable
  template:
    src="init_defaults.j2"
    dest="/etc/default/gitlab"
    mode="644"

- name: Make gitlab start on boot
  command: update-rc.d gitlab defaults 21
  become: yes


- name: Set up logrotate
  command: cp {{gitlab_repo_dir}}/lib/support/logrotate/gitlab /etc/logrotate.d/gitlab
  args:
    creates: /etc/logrotate.d/gitlab

- name: Compile assets
  command: sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production
  args:
    chdir: "{{gitlab_repo_dir}}"
  notify: restart gitlab

- name: Install nginx
  apt: pkg=nginx state=present

# Delete default nginx site, else will clobber Gitlab
- name: Make sure that default nginx site is absent
  file:
    name=/etc/nginx/sites-available/default
    state=absent

- name: Copy gitlab nginx site config
  template: src=nginx-gitlab.j2 dest=/etc/nginx/sites-available/gitlab

- name: Link gitlab site config
  file: src=/etc/nginx/sites-available/gitlab dest=/etc/nginx/sites-enabled/gitlab state=link
  notify: restart nginx

- name: Set gitlab admin password
  command: >
    sudo -u git -H psql -d gitlabhq_production
    -c "UPDATE users SET encrypted_password = '{{ gitlab_admin_password }}' WHERE id = 1;"
  when: gitlab_set_api_key|bool

- name: Un-expire gitlab admin password
  command: >
    sudo -u git -H psql -d gitlabhq_production
    -c "UPDATE users SET password_expires_at = null WHERE id = 1;"
  when: gitlab_set_api_key|bool

- name: Debug API key
  command: >
    sudo -u git -H psql -d gitlabhq_production
    -c "SELECT authentication_token FROM users WHERE id = 1;"
  register: api_key
- debug:
    var=api_key.stdout_lines[-2]

- name: Make sure postfix is uninstalled
  apt:
    pkg=postfix state=absent
    pkg=sendmail state=absent
